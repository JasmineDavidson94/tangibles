/// Glyph generator
/// By Brygg Ullmer, MIT Media Lab
/// Begun November 1, 2001
///
/// Based on threading template by Ben Fry (fry@media.mit.edu),
/// 4/18/2001, and WinHelp Java Tutorial: AnimatorApplication.java,
/// Arthur van Hoff

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.awt.image.*;

import javax.swing.*;
import java.io.*;

///////////////////////////////////////////////////////////
////////////////////  GrGlyphGen ////////////////////////////
///////////////////////////////////////////////////////////

public class GrGlyphGen {

/////////////  METHODS ///////////////

/////////////  MEMBERS ///////////////

  Hashtable tok2num      = null;
  Hashtable num2color    = null;
  Hashtable patnum2glyph = null;
//  Hashtable colorLok2Pos = null;

  Vector tokIdList       = null;

  int numToksMultiplier = 2048;

  //int patternMultiplier = 4;

  //int sideLen = 23;
  int sideLen = 11;

  //int maxToks = 9;
  int maxToks = 8;

  int numTranspLevels = 4;
  int numUpdatesPerTLevel = 1;

  //numUpdatesPerTLevel == number of paints to maintain at each transparency
  // level
  

//  int colors[][] = new int[maxToks][numTranspLevels];

  int colors[] = new int[maxToks];
  int unselectedColor;

//       {{1, 1, 1,   1, 0, 1,   1, 1, 1},  // 1

/*
  int pats[][] = 
       {{0, 1, 0,   1, 1, 1,   0, 1, 0},  // 1
	{1, 1, 0,   1, 0, 2,   0, 2, 2},  // 2
	{1, 1, 3,   1, 3, 2,   3, 2, 2},  // 3
	{1, 3, 3,   1, 0, 2,   4, 4, 2},  // 4
	{0, 3, 0,   1, 5, 2,   0, 4, 0},  // 5
	{0, 3, 5,   1, 0, 2,   6, 4, 0},  // 6
	{0, 3, 5,   1, 7, 2,   6, 4, 0},  // 7
	{7, 3, 5,   1, 0, 2,   6, 4, 8},  // 8
	{7, 3, 5,   1, 9, 2,   6, 4, 8}}; // 9 
*/

/*
   String spats[][] = {
      {"11111111011111111111111",
       "11111110111111111111111",
       "11111101111111111111111",
       "11111011111111111111111",
       "11110111111111111111111",
       "11101111111111111111111",
       "11011111111111111111111",
       "10111110000000001111111",
       "01111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111"},
*/
/*
   String spats[][] = {
      {"00000000011111000000000",
       "00000001111111110000000",
       "00000111111111111100000",
       "00001111111111111110000",
       "00011111111111111111000",
       "00111111111111111111100",
       "00111111111111111111100",
       "01111111111111111111110",
       "01111111111111111111110",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "01111111111111111111110",
       "01111111111111111111110",
       "00111111111111111111100",
       "00111111111111111111100",
       "00011111111111111111000",
       "00001111111111111110000",
       "00000111111111111100000",
       "00000001111111110000000"},

      {"00000000011111000000000",
       "00000001111111110000000",
       "00000111111111111100000",
       "00001111111111111110000",
       "00011111111111111111000",
       "00111111111111111111100",
       "00111111111111111111100",
       "01111111111111111111110",
       "01111111111111111111110",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "02222222222222222222220",
       "02222222222222222222220",
       "00222222222222222222200",
       "00222222222222222222200",
       "00022222222222222222000",
       "00002222222222222220000",
       "00000222222222222200000",
       "00000002222222220000000"},

      {"00000000011133000000000",
       "00000001111133330000000",
       "00000111111133333300000",
       "00001111111133333330000",
       "00011111111133333333000",
       "00111111111133333333300",
       "00111111111133333333300",
       "01111111111133333333330",
       "01111111111133333333330",
       "11111111111133333333333",
       "11111111111133333333333",
       "11111111111133333333333",
       "11111111111133333333333",
       "11111111111222333333333",
       "11111111122222233333333",
       "01111122222222222333330",
       "01222222222222222222230",
       "00222222222222222222200",
       "00222222222222222222200",
       "00022222222222222222000",
       "00002222222222222220000",
       "00000222222222222200000",
       "00000002222222220000000"}};

*/
/*
   String spats[][] = {
      {"11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111110000000001111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111"},

      {"11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111000000011111111",
       "11111111000000011111111",
       "11111111000000011111111",
       "11111111000000022222222",
       "22222222000000022222222",
       "22222222000000022222222",
       "22222222000000022222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222"},

      {"11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111112222222223333333",
       "11111122222222222333333",
       "11111222222222222233333",
       "11112222222222222223333",
       "11122222222222222222333",
       "11222222222222222222233",
       "12222222222222222222223",
       "22222222222222222222222"}};
*/
/*
   String spats[][] = {
      {"11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111000000011111111",
       "11111111000000011111111",
       "11111111000000011111111",
       "11111111000000011111111",
       "11111111000000011111111",
       "11111111000000011111111",
       "11111111000000011111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111"},

      {"11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111111111111111111",
       "11111111000000011111111",
       "11111111000000011111111",
       "11111111000000011111111",
       "11111111000000022222222",
       "22222222000000022222222",
       "22222222000000022222222",
       "22222222000000022222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222",
       "22222222222222222222222"},

      {"11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111111333333333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111111000000033333333",
       "11111112222222223333333",
       "11111122222222222333333",
       "11111222222222222233333",
       "11112222222222222223333",
       "11122222222222222222333",
       "11222222222222222222233",
       "12222222222222222222223",
       "22222222222222222222222"}};
*/

   String spats[][] = {
      {"11111111111",
       "11111111111",
       "11111111111",
       "11100000111",
       "11100000111",
       "11100000111",
       "11100000111",
       "11100000111",
       "11111111111",
       "11111111111",
       "11111111111"},

      {"11111111111",
       "11111111111",
       "11111111111",
       "11100000111",
       "11100000111",
       "11100000111",
       "11100000222",
       "22200000222",
       "22222222222",
       "22222222222",
       "22222222222"},

      {"11111133333",
       "11111133333",
       "11111133333",
       "11100000333",
       "11100000333",
       "11100000333",
       "11100000333",
       "11100000333",
       "11222222233",
       "12222222223",
       "22222222222"},

      {"14444444443",
       "11444444433",
       "11144444333",
       "11100000333",
       "11100000333",
       "11100000333",
       "11100000333",
       "11100000333",
       "11222222233",
       "12222222223",
       "22222222222"}};

///////////////////////////////////////////////////////////
////////////////////  BODIES  /////////////////////////////
///////////////////////////////////////////////////////////

////////////////////  GrGlyphGen /////////////////////////////

  public GrGlyphGen() {

    tok2num      = new Hashtable();
    num2color    = new Hashtable();
    patnum2glyph = new Hashtable();

//    colorLok2Pos = new Hashtable();

    tokIdList = new Vector(); 
    
    //Color transp = new Color(255, 255, 255, 95);
    //Color transp = new Color(100, 100, 100);
    //Color transp = new Color(150, 150, 150);
    //Color transp = new Color(1, 1, 1, 1);

    Color transp = new Color(0,0,0,0);

// TRANSP IS MOSTLY WORKING.  Use clear center; four shades of arriving

    //Color transp = new Color(255, 255, 255, 95);
    //Color transp = new Color(0,0,0,0); 
    
    colors[0]    = transp.getRGB(); 

    Color tmpColor = new Color(150, 150, 150);
    unselectedColor = tmpColor.getRGB();
    
    for (int i=1; i<maxToks; i++) { 
      colors[i] = colors[0];
    }
  }

////////////////////  map Tok 2 Num /////////////////////////////

  public int mapTok2Num(int tokId) {

    Integer key = new Integer(tokId);

    Integer tokNum = (Integer) tok2num.get(key);

    if (tokNum != null) {
      return tokNum.intValue();
    }

    // otherwise...

    int num  = tokIdList.size() + 1;
    tokNum   = new Integer(num);

    tokIdList.addElement(key);
    tok2num.put(key, tokNum);

    return num;
  }

//////////////////// setTokColor /////////////////////////////

  public void setTokColor(int tokId, Color tokColor) {

    int num        = mapTok2Num(tokId);
    Integer tokNum = new Integer(num);

    num2color.put(tokNum, tokColor);

if (num == 0) { dbg("PROTEST: setTokColor 0!"); }

//    colors[num] = tokColor.getRGB();


 // the following looks good, but is causing a big performance hit
    Color tempColor = new Color(tokColor.getRed(), tokColor.getGreen(),
                                tokColor.getBlue(), 20);


//                                tokColor.getBlue(), 100);

    colors[num] = tempColor.getRGB();


//  int colors[][] = new int[maxToks][numTranspLevels];

  }

//////////////////// getTokColor /////////////////////////////

  public Color getTokColor(int tokId) {

    int num        = mapTok2Num(tokId);
    Integer tokNum = new Integer(num);

    if (num2color.containsKey(tokNum) == false) {
      return null;
    }

    Color tokColor = (Color) num2color.get(tokNum);
    return tokColor;
  }

////////////////////  get Glyph Pat /////////////////////////////

  public int[] getGlyphPat(int numToksTotal, 
                           int numToksActive, int tokList[]) {


   try {
    int patKey = numToksTotal * numToksMultiplier;

    for (int i=0; i<numToksActive; i++) {
      int tokNum = mapTok2Num(tokList[i]);
      patKey += 16 * (1 << tokNum);
    }

    Integer key = new Integer(patKey);

   // Return cached glyph, if present

    if (patnum2glyph.containsKey(key)) {

      int glyph[] = (int []) patnum2glyph.get(key);
      return glyph;
    } 


   // Send dbg string
    String dbgString = "generating glyph: " + numToksTotal + " : ";
    dbgString += numToksActive + " : ";

    for (int i=0; i<numToksActive; i++) {
      dbgString += tokList[i] + " ";
    }

    dbgString += "; patkey: " + key;

    dbg(dbgString);

   // Generate the glyph

    int patColors[] = new int[maxToks+1];             //

    patColors[0] = colors[0];

    for (int i=1; i<=numToksTotal; i++) {
      patColors[i] = unselectedColor;
    }

    for (int i=0; i<numToksActive; i++) {
      int tokNum = mapTok2Num(tokList[i]);
      patColors[i+1] = colors[tokNum];           //
    }

    int glyph[] = generatePattern(numToksTotal, patColors);

    if (glyph == null) {
      dbg("getGlyphPat exception: passed a null by genPat");
      return null;
    }

    patnum2glyph.put(key, glyph);

    return glyph;
   } catch (Exception e) {
     dbg("getGlyphPat exception: " + e.toString());
     e.printStackTrace();
   }
   return null;
  }

////////////////////  generatePattern /////////////////////////////

  public int[] generatePattern(int numElements, int patColors[]) { 
//                                          int alphaLevel) {

    if (numElements > maxToks) {
      dbg("generatePattern debug: numElements > max allowed!");
      return null;
    }

   try {

    dbg("generatePattern: numElements = " + numElements);

    for (int i=0; i<=numElements; i++) {
      Color tmpColor = new Color(patColors[i]); 
      dbg("color " + i + ": " + tmpColor.toString());
    }

    int pat[]    = new int[sideLen * sideLen];
    int whichPat = numElements - 1;

//  int unselectedColor = new Color(150, 150, 150);

  //populate pattern

    for (int j=0, n=0; j < sideLen; j++) {
      String str    = spats[whichPat][j];

      char carray[] = str.toCharArray();

      for (int i=0; i < sideLen; i++) {

        //int colorIdx = pats[whichPat][j][i];
        int colorIdx = (int) (carray[i] - '0');

	if (colorIdx > numElements) {
	  dbg("genPat bogosity: colorIdx > numEl!");
	  return null;
	}

        pat[n++] = patColors[colorIdx];
      }
    }

    return pat;
   } catch (Exception e) {
     dbg("genPattern exception: " + e.toString());
   }
   return null;
  }

 ///////////////////// Debug ///////////////////////

  private static int dcnt;

  public void dbg(String s) {

    System.out.println("GrGlyphGen." + (dcnt++) + ": " + s);
  } 
}

//// END ////

